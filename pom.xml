<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.example.demo</groupId>
	<artifactId>riven</artifactId>
	<version>0.0.1</version>
	<name>riven</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<profiles.dir>src/main/profiles</profiles.dir>
		<java.version>1.8</java.version>
		<tomcat.version>8.5.5</tomcat.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- maven只支持单继承，如果想实现多继承的hauler，就使用这种方式， <scope>import</scope> ，导入springboot的依赖管理，注意要放在dependencyManagement中 -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>2.0.3.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Finchley.SR4</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>spring-boot-starter-logging</artifactId>
					<groupId>org.springframework.boot</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--该jar包为无需代码的 HTTP 接口快速开发框架-->
		<!--<dependency>-->
			<!--<groupId>org.ssssssss</groupId>-->
			<!--<artifactId>magic-api-spring-boot-starter</artifactId>-->
			<!--<version>1.2.2</version>-->
		<!--</dependency>-->
		<!--该jar包为打印日志数据脱敏-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.1.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- 默认使用配置 -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency> -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> 
		<artifactId>spring-boot-maven-plugin</artifactId> </plugin> <plugin> <groupId>org.apache.maven.plugins</groupId> 
		<artifactId>maven-war-plugin</artifactId> <version>2.6</version> <configuration> 
		<failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> 
		</plugins> </build> -->
	<build>
		<finalName>${project.artifactId}-8778</finalName>
		<plugins>
			<!-- <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> 
				</plugin> -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.3.1.RELEASE</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.2.2.RELEASE</version>
				<configuration>
					<mainClass>com.example.demo.DemoApplication</mainClass>
					<includeSystemScope>true</includeSystemScope>
					<includes>
						<!-- 设置没有jar包 -->
						<include>
							<groupId>nothing</groupId>
							<artifactId>nothing</artifactId>
						</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>bundle</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>${basedir}/src/main/resources/assembly/assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<!-- 设置配置文件的编译位置，为了打包使用 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<!-- 将不区分环境的文件编译到config下，这里exclude的元素当前不参与编译。 -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>assembly/**</exclude>
					<exclude>bin/**</exclude>
					<exclude>logs/**</exclude>
					<exclude>cronolog/**</exclude>
					<exclude>application.properties</exclude>
					<exclude>log4j2.xml</exclude>
					<exclude>sysconfig.properties</exclude>
				</excludes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<!-- 分环境配置文件编译到制定目录，注意这里的dev、test、pro目录相当于resources目录，分环境配置文件如果有目录，需要创建好 
				${project.build.directory} 项目构建目录，target目录 -->
			<resource>
				<directory>${profiles.active}</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
		</resources>
	</build>

	<profiles>
		<!-- 开发环境 -->
		<profile>
			<id>dev</id>
			<properties>
				<profiles.active>${profiles.dir}/dev</profiles.active>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<!-- 开发用，因为编译设置的配置文件都到了target下的config下，目的是为了打包使用，那么class下就没有配置文件了，那么本地其服务就报错了。在本地启动的时候加载的dev 
				的配置文件，以供开发使用 -->
			<build>
				<resources>
					<resource>
						<directory>src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>assembly/**</exclude>
							<exclude>bin/**</exclude>
							<exclude>logs/**</exclude>
							<exclude>cronolog/**</exclude>
							<exclude>application.properties</exclude>
							<exclude>log4j2.xml</exclude>
							<exclude>sysconfig.properties</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>${profiles.active}</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>
		<!-- 测试环境 -->
		<profile>
			<id>test</id>
			<properties>
				<profiles.active>${profiles.dir}/test</profiles.active>
			</properties>
		</profile>
		<!-- 线上环境 -->
		<profile>
			<id>pro</id>
			<properties>
				<profiles.active>${profiles.dir}/pro</profiles.active>
			</properties>
		</profile>
	</profiles>


</project>
